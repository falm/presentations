<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.1
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>并发模型 Actor &amp; CSP - By Jason Hou</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.dark.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>并发模型 Actor &amp; CSP</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>并发和并行</h2>

</hgroup><article>

<img src="http://jolestar.com/images/concurrent/concurrent_vs_parallel.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>并发的方案</h2>

</hgroup><article>

<ul>
<li>进程</li>
<li>线程</li>
<li>事件循环</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>进程 or 线程</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>线程遇到的问题</h2>

</hgroup><article>

<ul>
<li>竞争条件</li>
<li>死锁</li>
<li><img src="http://images.51cto.com/files/uploadimg/20090805/120148542.jpg" alt=""></li>
<li>执行顺序依赖</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>系统在多少线程下是最优的？</h2>

</hgroup><article>

<img src="http://jolestar.com/images/concurrent/cpu_ratio.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>如何有效利用在阻塞期间的资源</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>

<ul>
<li>异步回调</li>
<li>GreenThread/Coroutine/Fiber</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>GreenThread/Coroutine/Fiber</h2>

</hgroup><article>

<ul>
<li>运行在用户空间，占用较少的资源，可以创建大量的实例</li>
<li><img src="http://docs.oracle.com/cd/E19455-01/806-3461/images/nancb6.eps.gif" alt=""></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>

<ul>
<li>异步回调会遇到，回调地狱问题</li>
<li>GreenThread/Coroutine/Fiber 需要手动的切换和管理</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>CSP</h2>

</hgroup><article>

<img src="http://www.jdon.com/simgs/performance/channel.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Go</h2>

</hgroup><article>

<ul>
<li>用goroutine作为做小执行单元</li>
<li>channel作为通讯通道</li>
<li>语言层面实现goroutine调度器</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Goroutine调度器</h2>

</hgroup><article>

<img src="http://morsmachine.dk/in-motion.jpg" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>实现M:M</h2>

</hgroup><article>

<img src="http://www.studytonight.com/operating-system/images/many-to-many-model.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Actor</h2>

</hgroup><article>

<ul>
<li>通过发送消息，来共享资源</li>
<li>actor可以创建其他actor</li>
<li>actor可以接受并处理消息，及修改自身的状态</li>
<li>actor作为独立的实体可以热更新</li>
<li>一个actor关掉的时候可以发送出消息通知其他的actor</li>
<li>不区分本地和远程</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>

<img src="http://blog.scottlogic.com/rdoyle/assets/ActorModel.png" alt="">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Actor模型的实现</h2>

</hgroup><article>

<ul>
<li>Erlang/Elixir</li>
<li>Akka(JVM)</li>
<li>Celluloid(ruby)</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Golang CSP &amp; Actor</h2>

</hgroup><article>

<img src="http://www.jdon.com/simgs/performance/csp.png" alt="">
<ul>
<li>CSP : Channel是主体，处理器是匿名的，实体和实体之间是松耦合的.</li>
<li>Actor: Actor是主体,MailBox是透明的，实体之间是紧耦合.</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>谢谢大家</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.1</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'slide',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>


<!--placeholder-->
</body>
</html>
